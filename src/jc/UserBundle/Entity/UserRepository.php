<?php

namespace jc\UserBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * UserRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class UserRepository extends EntityRepository
{
    /**
     * Allows to get all users who have specified role.
     * @param Role $role Role we want to get matching users.
     * @return List of users with specified role.
     */
    public function getUserWithRole($role) {

        $query = $this->_em->createQuery('SELECT u FROM jcUserBundle:User u WHERE :role MEMBER OF u.internalRoles');
        $query->setParameter('role', $role);

        return $query->getResult();
    }

    /**
     * Allows to check if mail is unique for user.
     * @param String $mail Mail we want to check unicity. NULL to ignore this parameter.
     * @param int $userId User identifier to exclude from unicity search (useful when editing user). 0 to ignore this parameter.
     * @return TRUE if mail is unique, FALSE either.
     */
    public function checkMailForUser($mail, $userId) {

        $queryBuilder = $this->createQueryBuilder('u');
        $queryBuilder = $queryBuilder->select('COUNT(u)')
            ->where('u.mail = :mail')
            ->setParameter('mail', $mail);
        
        if ($userId > 0)
        {
            $queryBuilder->andWhere('u.id <> :userId')
                ->setParameter('userId', $userId);
        }

        return ($queryBuilder->getQuery()->getSingleScalarResult() > 0) ? false : true;
    }

    /**
     * Allows to check if login is unique for user.
     * @param String $login Login we want to check unicity. NULL to ignore this parameter.
     * @param int $userId User identifier to exclude from unicity search (useful when editing user). 0 to ignore this parameter.
     * @return TRUE if login is unique, FALSE either.
     */
    public function checkLoginForUser($login, $userId) {

        $queryBuilder = $this->createQueryBuilder('u');
        $queryBuilder = $queryBuilder->select('COUNT(u)')
            ->where('u.username = :login')
            ->setParameter('login', $login);

        if ($userId > 0)
        {
            $queryBuilder->andWhere('u.id <> :userId')
                ->setParameter('userId', $userId);
        }

        return ($queryBuilder->getQuery()->getSingleScalarResult() > 0) ? false : true;
    }
}
